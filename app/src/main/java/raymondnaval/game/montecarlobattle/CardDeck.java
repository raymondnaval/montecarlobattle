package raymondnaval.game.montecarlobattle;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.support.v4.content.ContextCompat;
import android.util.Log;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;

public class CardDeck {

    private static final String TAG = "Class: CardDeck";
    private int numJokers;
    private boolean peekTopOfStack;
    private Card[] cards;
    private ArrayList<Card> deck, cardsInFoundation;
    private int difficulty = 1;
    private Context mContext;
    private int topStackCard;

    /**
     * Difficulty: 0 = easy, 1 = medium, 2 = hard.
     */
    public CardDeck(Context context, boolean peekTopOfStack, boolean bigDeck, boolean biggerDeck, int jokers, int difficulty) {
        numJokers = jokers;
        this.difficulty = difficulty;
        deck = new ArrayList<>();
        cardsInFoundation = new ArrayList<>();
        mContext = context;
        this.peekTopOfStack = peekTopOfStack;

        if (difficulty == 0) {
            topStackCard = GameConstants.EASY_TABLEAU + 1;
        } else if (difficulty == 2) {
            topStackCard = GameConstants.HARD_TABLEAU + 1;
        } else if (difficulty == 3) {
            topStackCard = GameConstants.HARDER_TABLEAU + 1;
        } else {
            topStackCard = GameConstants.MEDIUM_TABLEAU + 1;
        }
        shuffle();
        initializePlayableCards();
    }

    // Shuffle the cards.
    private void shuffle() {

        HashMap<Integer, Integer> hash = new HashMap<>();
        Random rando = new Random();
        int key = 0;
        int jokerKey = 1000;
        int jokerKey2 = 1000;
        int randomCardInTableauKey = 1000;
        int randomCardInTableauKey2 = 1000;
        int deckSize = 52;

        if (numJokers == 1) {
            deckSize = 53;

            /**
             * int jokerKey - keeps track of where the joker is in the deck.
             * int randomCardInTableauKey - Keeps track of random card in tableau. Generated by
             * picking a random number when the joker is "shuffled" into the deck.
             *
             * Since jokers can only appear inside the tableau, if the joker is outside the range of
             * tableau cards, it will switch places with the randomly selected card.
             *
             * The joker will also be given a temporary value of 52 and will be changed to 65
             * because 52-64 are the IDs of the bonus cards.
             */
            while (key < 53) {
                int r = rando.nextInt(53);
                if (!hash.containsValue(r)) {
                    if (r == 52) {
                        jokerKey = key;
                        randomCardInTableauKey = rando.nextInt(topStackCard - 1);
                    }
                    hash.put(key, r);
                    key++;
                }
            }

            if (jokerKey >= topStackCard - 1) {
                hash.put(jokerKey, hash.get(randomCardInTableauKey));
                hash.put(randomCardInTableauKey, 65);
            } else {
                hash.put(jokerKey, 65); // Change 52 to 65.
            }

        } else if (numJokers == 2) {
            deckSize = 54;

            while (key < 54) {
                int r = rando.nextInt(54);
                if (!hash.containsValue(r)) {
                    if (r == 52) {
                        jokerKey = key;

                        // Keep changing the key if the two random keys keep matching.
                        do {
                            randomCardInTableauKey = rando.nextInt(topStackCard - 1);
                        }
                        while (randomCardInTableauKey2 == randomCardInTableauKey);

                    }
                    if (r == 53) {
                        jokerKey2 = key;

                        do {
                            randomCardInTableauKey2 = rando.nextInt(topStackCard - 1);
                        }
                        while (randomCardInTableauKey2 == randomCardInTableauKey);
                    }
                    hash.put(key, r);
                    key++;
                }
            }

            if (jokerKey >= topStackCard - 1) {
                hash.put(jokerKey, hash.get(randomCardInTableauKey));
                hash.put(randomCardInTableauKey, 65);
            } else {
                hash.put(jokerKey, 65); // Change 52 to 65.
            }
            if (jokerKey2 >= topStackCard - 1) {
                hash.put(jokerKey2, hash.get(randomCardInTableauKey2));
                hash.put(randomCardInTableauKey2, 66);
            } else {
                hash.put(jokerKey2, 66); // Change 53 to 66.
            }

        } else {

            while (key < 52) {
                int r = rando.nextInt(52);
                if (!hash.containsValue(r)) {
                    hash.put(key, r);
                    key++;
                }
            }
        }

        // Add random numbers to deck array.
        for (int i = 0; i < deckSize; i++) {

            deck.add(new Card(mContext, hash.get(i)));

            // For cheating and testing. :D
//                deck.add(new Card(mContext, i));

            Log.i(TAG, "shuffle -- value: " + hash.get(i) + " position: " + i);
        }

        // Represents the back of the card. Do not add if peeker booster card is used.
        if (!peekTopOfStack) {
            deck.add(new Card(mContext, -1));
        }
    }

    // Add bonus cards to Stack.
    public void addCards(int moarCards, Rect stackLocation, boolean bottomOfdeck) {

        if (moarCards > 0) {
            Log.i(TAG, "addCards -- moarCards: " + moarCards);
            HashMap<Integer, Integer> hash = new HashMap<>();
            Random rando = new Random();
            int key = 0;
            while (key < moarCards) {
                int r = rando.nextInt(13) + 52;
                if (!hash.containsValue(r)) {
                    hash.put(key, r);
                    key++;
                }
            }

            if (bottomOfdeck) {

                // Remove the card with ID = -1 if adding bonus cards to bottom of deck. Do not
                // remove card if peeker booster is used.
                if (!peekTopOfStack) {
                    if (deck.size() > 0) {
                        deck.remove(deck.size() - 1);
                    }
                }

                // Add random numbers to deck array.
                for (int i = 0; i < moarCards; i++) {
                    deck.add(new Card(mContext, hash.get(i)));
                    setCardPosition(deck.size() - 1, stackLocation);
                }

                // Append card with ID = -1. Do not add if peeker booster is used.
                if (!peekTopOfStack) {
                    deck.add(new Card(mContext, -1));
                    setCardPosition(deck.size() - 1, stackLocation);
                }

            } else {

                ArrayList<Card> tempDeck = new ArrayList<>();
                for (int i = 0; i < topStackCard - 1; i++) {
                    tempDeck.add(deck.get(i));
                }
                for (int i = topStackCard - 1; i < topStackCard - 1 + moarCards; i++) {
                    tempDeck.add(new Card(mContext, hash.get(i - (topStackCard - 1))));
                    setCardPosition(i, stackLocation);
                }
                for (int i = topStackCard - 1; i < deck.size(); i++) {
                    tempDeck.add(deck.get(i));
                }
                deck = tempDeck;

                // Look at new deck. Comment out if not testing.
//                for (int i = 0; i < deck.size(); i++) {
//                    Log.i(TAG, "addCards -- value: " + deck.get(i).getCardID() + " position: " + i);
//                }
//                Log.i(TAG, "addCards -- tempdeck size: " + tempDeck.size());
            }

        }
    }

    // Determine the playable cards in each column. Differs for each difficulty setting.
    private void initializePlayableCards() {
        switch (difficulty) {
            case 0:
                deck.get(3).setIsPlayable(true);
                deck.get(7).setIsPlayable(true);
                deck.get(11).setIsPlayable(true);
                deck.get(15).setIsPlayable(true);
                deck.get(19).setIsPlayable(true);
                deck.get(23).setIsPlayable(true);
                break;
            case 2:
                deck.get(6).setIsPlayable(true);
                deck.get(13).setIsPlayable(true);
                deck.get(20).setIsPlayable(true);
                deck.get(27).setIsPlayable(true);
                deck.get(34).setIsPlayable(true);
                break;
            case 3:
                deck.get(8).setIsPlayable(true);
                deck.get(17).setIsPlayable(true);
                deck.get(26).setIsPlayable(true);
                deck.get(35).setIsPlayable(true);
                break;
            default:
                deck.get(3).setIsPlayable(true);
                deck.get(8).setIsPlayable(true);
                deck.get(13).setIsPlayable(true);
                deck.get(18).setIsPlayable(true);
                deck.get(23).setIsPlayable(true);
                deck.get(27).setIsPlayable(true);
                break;
        }
    }

    public int[] initialActiveColumnCards() {
        if (difficulty == 0) {
            return new int[]{3, 7, 11, 15, 19, 23};
        } else if (difficulty == 1) {
            return new int[]{3, 8, 13, 18, 23, 27};
        } else if (difficulty == 3) {
            return new int[]{8, 17, 26, 35};
        } else {
            return new int[]{6, 13, 20, 27, 34};
        }

    }

    public boolean isLegalMove(int cardTouched) {
        if (cardTouched != -1) {
            return deck.get(cardTouched).neighboringCards(cardsInFoundation.get(cardsInFoundation.size() - 1).getCardID());
        } else {
            return false;
        }
    }

    public int getCardIDs(int cardFromDeck) {
        return deck.get(cardFromDeck).getCardID();
    }

    // Draw cards in tableau, foundation, and Stack.
    public void drawCards(Canvas canvas) {
        tableauCards(canvas);
        foundationCard(canvas);
        stackCards(canvas);
    }

    // Draw tableau cards.
    private void tableauCards(Canvas canvas) {
        switch (difficulty) {
            case 0:
                for (int i = 0; i < GameConstants.EASY_TABLEAU; i++) {
                    deck.get(i).draw(canvas);
                }
                break;
            case 2:
                for (int i = 0; i < GameConstants.HARD_TABLEAU; i++) {
                    deck.get(i).draw(canvas);
                }
                break;
            case 3:
                for (int i = 0; i < GameConstants.HARDER_TABLEAU; i++) {
                    deck.get(i).draw(canvas);
                }
                break;
            default:
                for (int i = 0; i < GameConstants.MEDIUM_TABLEAU; i++) {
                    deck.get(i).draw(canvas);
                }
                break;
        }
    }

    // Draw foundation cards.
    private void foundationCard(Canvas canvas) {
        cardsInFoundation.get(cardsInFoundation.size() - 1).draw(canvas);
    }

    // Draw stack cards.
    private void stackCards(Canvas canvas) {

        //if Peeker booster is played and the top stack card counter is less than the deck size,
        // draw the top stack card. Else draw the last card in the deck if top stack card isn't the
        // last card in the deck.
        if (peekTopOfStack && topStackCard < deck.size()) {
            deck.get(topStackCard).draw(canvas);
        } else {
            if (topStackCard != deck.size() - 1) {
                deck.get(deck.size() - 1).draw(canvas);
            }
        }
    }

    public int getDeckSize() {
        return deck.size();
    }

    // Add card to foundation.
    public void addToFoundation(int cardFromDeck) {
        cardsInFoundation.add(deck.get(cardFromDeck));
    }

    public void setCardPosition(int cardFromDeck, Rect rect) {
        deck.get(cardFromDeck).setCardPosition(rect);
    }

    // Move card to foundation.
    public void moveToFoundation(int cardFromDeck, int l, int t, int r, int b) {

        deck.get(cardFromDeck).setIsPlayable(false);

        // If card is last card in column, do not set the card behind it to playable (because there is no card behind it).
        if (cardFromDeck != 0) {
            if (!deck.get(cardFromDeck - 1).getIsPlayable()) {
                deck.get(cardFromDeck - 1).setIsPlayable(true);
            }
        }

        cardsInFoundation.add(deck.get(cardFromDeck));
        cardsInFoundation.get(cardsInFoundation.size() - 1).setCardPosition(new Rect(l, t, r, b));
        Log.i(TAG, "card from deck: " + cardFromDeck + " foundation size: " + cardsInFoundation.size());
    }

    public Rect getCardPosition(int cardFromDeck) {
        return deck.get(cardFromDeck).getCardPosition();
    }

    // Track top stack card.
    public int getTopStackCard() {
        return topStackCard;
    }

    // Replace with new top stack card.
    public void setTopStackCard() {
        if (topStackCard < deck.size()) {
            topStackCard++;
        }
        Log.i(TAG, "setTopStackCard -top stack card: " + topStackCard);
    }

    /**
     * Card is only accessible from CardDeck.
     *
     * @param \rect - The coordinates of where the card is drawn on the canvas.
     *              CARD_ID - This is the card's suit and rank. It never changes so it is set as a final int.
     *              isPlayable - This determines if the card is playable or on top of its column.
     *
     *              <p>
     *              Randomize 67 numbers to represent 52 cards, 13 bonus cards, and 2 jokers
     *              0 - 12 = clubs
     *              13 - 25 = spades
     *              26 - 38 = hearts
     *              39 - 51 = diamonds
     *              52 - 64 = bonus
     *              65 - 66 = jokers
     *              </p>
     * @author Raymond Naval
     */
    private class Card {

        private final String TAG = "Card";
        private Rect rect;
        private int color;
        private final int CARD_ID;
        private boolean isPlayable;
        private Drawable cardImg;
        private Context mContext;
        private int[] playableCards; // All legal moves for this card in an int array of card IDs.

        public Card(Context context, int cardID) {
            this.CARD_ID = cardID;
            this.isPlayable = false;
            mContext = context;

            // If not jokers, only 12 cards are legal. Else all cards are legal.
            if (CARD_ID != 65 || CARD_ID != 66) {
                playableCards = new int[12];
            } else {
                playableCards = new int[67];
            }
            getPlayableCards();
            getCard();
        }

        private void getCard() {
            switch (CARD_ID) {

                case -1:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.card_back);
                    break;

                // Clubs.
                case 0:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.ace_clubs);
                    break;
                case 1:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.two_clubs);
                    break;
                case 2:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.three_clubs);
                    break;
                case 3:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.four_clubs);
                    break;
                case 4:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.five_clubs);
                    break;
                case 5:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.six_clubs);
                    break;
                case 6:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.seven_clubs);
                    break;
                case 7:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.eight_clubs);
                    break;
                case 8:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.nine_clubs);
                    break;
                case 9:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.ten_clubs);
                    break;
                case 10:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.jack_clubs);
                    break;
                case 11:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.queen_clubs);
                    break;
                case 12:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.king_clubs);
                    break;

                // Spades.
                case 13:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.ace_spades);
                    break;
                case 14:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.two_spades);
                    break;
                case 15:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.three_spades);
                    break;
                case 16:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.four_spades);
                    break;
                case 17:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.five_spades);
                    break;
                case 18:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.six_spades);
                    break;
                case 19:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.seven_spades);
                    break;
                case 20:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.eight_spades);
                    break;
                case 21:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.nine_spades);
                    break;
                case 22:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.ten_spades);
                    break;
                case 23:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.jack_spades);
                    break;
                case 24:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.queen_spades);
                    break;
                case 25:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.king_spades);
                    break;

                // Hearts.
                case 26:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.ace_hearts);
                    break;
                case 27:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.two_hearts);
                    break;
                case 28:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.three_hearts);
                    break;
                case 29:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.four_hearts);
                    break;
                case 30:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.five_hearts);
                    break;
                case 31:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.six_hearts);
                    break;
                case 32:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.seven_hearts);
                    break;
                case 33:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.eight_hearts);
                    break;
                case 34:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.nine_hearts);
                    break;
                case 35:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.ten_hearts);
                    break;
                case 36:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.jack_hearts);
                    break;
                case 37:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.queen_hearts);
                    break;
                case 38:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.king_hearts);
                    break;

                // Diamonds.
                case 39:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.ace_diamonds);
                    break;
                case 40:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.two_diamonds);
                    break;
                case 41:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.three_diamonds);
                    break;
                case 42:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.four_diamonds);
                    break;
                case 43:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.five_diamonds);
                    break;
                case 44:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.six_diamonds);
                    break;
                case 45:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.seven_diamonds);
                    break;
                case 46:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.eight_diamonds);
                    break;
                case 47:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.nine_diamonds);
                    break;
                case 48:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.ten_diamonds);
                    break;
                case 49:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.jack_diamonds);
                    break;
                case 50:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.queen_diamonds);
                    break;
                case 51:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.king_diamonds);
                    break;

                // Bonus.
                case 52:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.ace_bonus);
                    break;
                case 53:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.two_bonus);
                    break;
                case 54:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.three_bonus);
                    break;
                case 55:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.four_bonus);
                    break;
                case 56:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.five_bonus);
                    break;
                case 57:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.six_bonus);
                    break;
                case 58:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.seven_bonus);
                    break;
                case 59:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.eight_bonus);
                    break;
                case 60:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.nine_bonus);
                    break;
                case 61:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.ten_bonus);
                    break;
                case 62:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.jack_bonus);
                    break;
                case 63:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.queen_bonus);
                    break;
                case 64:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.king_bonus);
                    break;

                // Joker cards. Coming soon.
                case 65:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.joker_black);
                    break;
                case 66:
                    cardImg = ContextCompat.getDrawable(mContext, R.drawable.joker_red);
                    break;

            }
        }

        private void getPlayableCards() {
            if (CARD_ID < 65) {
                switch (CARD_ID % 13) {
                    case 0:
                        playableCards[0] = 1;
                        playableCards[1] = 12;
                        playableCards[2] = 14;
                        playableCards[3] = 25;
                        playableCards[4] = 27;
                        playableCards[5] = 38;
                        playableCards[6] = 40;
                        playableCards[7] = 51;
                        playableCards[8] = 53;
                        playableCards[9] = 64;
                        playableCards[10] = 65;
                        playableCards[11] = 66;
                        break;
                    case 1:
                        playableCards[0] = 0;
                        playableCards[1] = 2;
                        playableCards[2] = 13;
                        playableCards[3] = 15;
                        playableCards[4] = 26;
                        playableCards[5] = 28;
                        playableCards[6] = 39;
                        playableCards[7] = 41;
                        playableCards[8] = 52;
                        playableCards[9] = 54;
                        playableCards[10] = 65;
                        playableCards[11] = 66;
                        break;
                    case 2:
                        playableCards[0] = 1;
                        playableCards[1] = 3;
                        playableCards[2] = 14;
                        playableCards[3] = 16;
                        playableCards[4] = 27;
                        playableCards[5] = 29;
                        playableCards[6] = 40;
                        playableCards[7] = 42;
                        playableCards[8] = 53;
                        playableCards[9] = 55;
                        playableCards[10] = 65;
                        playableCards[11] = 66;
                        break;
                    case 3:
                        playableCards[0] = 2;
                        playableCards[1] = 4;
                        playableCards[2] = 15;
                        playableCards[3] = 17;
                        playableCards[4] = 28;
                        playableCards[5] = 30;
                        playableCards[6] = 41;
                        playableCards[7] = 43;
                        playableCards[8] = 54;
                        playableCards[9] = 56;
                        playableCards[10] = 65;
                        playableCards[11] = 66;
                        break;
                    case 4:
                        playableCards[0] = 3;
                        playableCards[1] = 5;
                        playableCards[2] = 16;
                        playableCards[3] = 18;
                        playableCards[4] = 29;
                        playableCards[5] = 31;
                        playableCards[6] = 42;
                        playableCards[7] = 44;
                        playableCards[8] = 55;
                        playableCards[9] = 57;
                        playableCards[10] = 65;
                        playableCards[11] = 66;
                        break;
                    case 5:
                        playableCards[0] = 4;
                        playableCards[1] = 6;
                        playableCards[2] = 17;
                        playableCards[3] = 19;
                        playableCards[4] = 30;
                        playableCards[5] = 32;
                        playableCards[6] = 43;
                        playableCards[7] = 45;
                        playableCards[8] = 56;
                        playableCards[9] = 58;
                        playableCards[10] = 65;
                        playableCards[11] = 66;
                        break;
                    case 6:
                        playableCards[0] = 5;
                        playableCards[1] = 7;
                        playableCards[2] = 18;
                        playableCards[3] = 20;
                        playableCards[4] = 31;
                        playableCards[5] = 33;
                        playableCards[6] = 44;
                        playableCards[7] = 46;
                        playableCards[8] = 57;
                        playableCards[9] = 59;
                        playableCards[10] = 65;
                        playableCards[11] = 66;
                        break;
                    case 7:
                        playableCards[0] = 6;
                        playableCards[1] = 8;
                        playableCards[2] = 19;
                        playableCards[3] = 21;
                        playableCards[4] = 32;
                        playableCards[5] = 34;
                        playableCards[6] = 45;
                        playableCards[7] = 47;
                        playableCards[8] = 58;
                        playableCards[9] = 60;
                        playableCards[10] = 65;
                        playableCards[11] = 66;
                        break;
                    case 8:
                        playableCards[0] = 7;
                        playableCards[1] = 9;
                        playableCards[2] = 20;
                        playableCards[3] = 22;
                        playableCards[4] = 33;
                        playableCards[5] = 35;
                        playableCards[6] = 46;
                        playableCards[7] = 48;
                        playableCards[8] = 59;
                        playableCards[9] = 61;
                        playableCards[10] = 65;
                        playableCards[11] = 66;
                        break;
                    case 9:
                        playableCards[0] = 8;
                        playableCards[1] = 10;
                        playableCards[2] = 21;
                        playableCards[3] = 23;
                        playableCards[4] = 34;
                        playableCards[5] = 36;
                        playableCards[6] = 47;
                        playableCards[7] = 49;
                        playableCards[8] = 60;
                        playableCards[9] = 62;
                        playableCards[10] = 65;
                        playableCards[11] = 66;
                        break;
                    case 10:
                        playableCards[0] = 9;
                        playableCards[1] = 11;
                        playableCards[2] = 22;
                        playableCards[3] = 24;
                        playableCards[4] = 35;
                        playableCards[5] = 37;
                        playableCards[6] = 48;
                        playableCards[7] = 50;
                        playableCards[8] = 61;
                        playableCards[9] = 63;
                        playableCards[10] = 65;
                        playableCards[11] = 66;
                        break;
                    case 11:
                        playableCards[0] = 10;
                        playableCards[1] = 12;
                        playableCards[2] = 23;
                        playableCards[3] = 25;
                        playableCards[4] = 36;
                        playableCards[5] = 38;
                        playableCards[6] = 49;
                        playableCards[7] = 51;
                        playableCards[8] = 62;
                        playableCards[9] = 64;
                        playableCards[10] = 65;
                        playableCards[11] = 66;
                        break;
                    case 12:
                        playableCards[0] = 0;
                        playableCards[1] = 11;
                        playableCards[2] = 13;
                        playableCards[3] = 24;
                        playableCards[4] = 26;
                        playableCards[5] = 37;
                        playableCards[6] = 39;
                        playableCards[7] = 50;
                        playableCards[8] = 52;
                        playableCards[9] = 63;
                        playableCards[10] = 65;
                        playableCards[11] = 66;
                        break;
                }
            }
        }

        public void setCardPosition(Rect rect) {
            this.rect = rect;
        }


        public Rect getCardPosition() {
            return rect;
        }

        public boolean hasCardPosition() {
            if (rect != null) {
                return true;
            } else {
                return false;
            }
        }

        public void setIsPlayable(boolean isPlayable) {
            this.isPlayable = isPlayable;
        }

        public boolean getIsPlayable() {
            return isPlayable;
        }

        public int getCardID() {
            return CARD_ID;
        }

        public boolean neighboringCards(int foundationCardID) {
            Log.i(TAG, "touched card ID: " + CARD_ID + " foundation card ID: " + foundationCardID);
            boolean isNeighboringCard = false;
            if (CARD_ID == 65 || CARD_ID == 66) {
                isNeighboringCard = true;
            } else {
                for (int i = 0; i < playableCards.length; i++) {
                    if (playableCards[i] == foundationCardID) {
                        isNeighboringCard = true;
                        break;
                    }
                }
            }
            return isNeighboringCard;
        }


        public void draw(Canvas canvas) {
            cardImg.setBounds(rect);
            cardImg.draw(canvas);
        }

        @Override
        public String toString() {
            String cardNm = "";
            switch (CARD_ID) {
                case 0:
                    cardNm = "Ace clubs";
                    break;
                case 1:
                    cardNm = "2 clubs";
                    break;
                case 2:
                    cardNm = "3 clubs";
                    break;
                case 3:
                    cardNm = "4 clubs";
                    break;
                case 4:
                    cardNm = "5 clubs";
                    break;
                case 5:
                    cardNm = "6 clubs";
                    break;
                case 6:
                    cardNm = "7 clubs";
                    break;
                case 7:
                    cardNm = "8 clubs";
                    break;
                case 8:
                    cardNm = "9 clubs";
                    break;
                case 9:
                    cardNm = "10 clubs";
                    break;
                case 10:
                    cardNm = "Jack clubs";
                    break;
                case 11:
                    cardNm = "Q clubs";
                    break;
                case 12:
                    cardNm = "K clubs";
                    break;
                case 13:
                    cardNm = "Ace spades";
                    break;
                case 14:
                    cardNm = "2 spades";
                    break;
                case 15:
                    cardNm = "3 spades";
                    break;
                case 16:
                    cardNm = "4 spades";
                    break;
                case 17:
                    cardNm = "5 spades";
                    break;
                case 18:
                    cardNm = "6 spades";
                    break;
                case 19:
                    cardNm = "7 spades";
                    break;
                case 20:
                    cardNm = "8 spades";
                    break;
                case 21:
                    cardNm = "9 spades";
                    break;
                case 22:
                    cardNm = "10 spades";
                    break;
                case 23:
                    cardNm = "Jack spades";
                    break;
                case 24:
                    cardNm = "Q spades";
                    break;
                case 25:
                    cardNm = "K spades";
                    break;
                case 26:
                    cardNm = "Ace hearts";
                    break;
                case 27:
                    cardNm = "2 hearts";
                    break;
                case 28:
                    cardNm = "3 hearts";
                    break;
                case 29:
                    cardNm = "4 hearts";
                    break;
                case 30:
                    cardNm = "5 hearts";
                    break;
                case 31:
                    cardNm = "6 hearts";
                    break;
                case 32:
                    cardNm = "7 hearts";
                    break;
                case 33:
                    cardNm = "8 hearts";
                    break;
                case 34:
                    cardNm = "9 hearts";
                    break;
                case 35:
                    cardNm = "10 hearts";
                    break;
                case 36:
                    cardNm = "Jack hearts";
                    break;
                case 37:
                    cardNm = "Q hearts";
                    break;
                case 38:
                    cardNm = "K hearts";
                    break;
                case 39:
                    cardNm = "Ace diamonds";
                    break;
                case 40:
                    cardNm = "2 diamonds";
                    break;
                case 41:
                    cardNm = "3 diamonds";
                    break;
                case 42:
                    cardNm = "4 diamonds";
                    break;
                case 43:
                    cardNm = "5 diamonds";
                    break;
                case 44:
                    cardNm = "6 diamonds";
                    break;
                case 45:
                    cardNm = "7 diamonds";
                    break;
                case 46:
                    cardNm = "8 diamonds";
                    break;
                case 47:
                    cardNm = "9 diamonds";
                    break;
                case 48:
                    cardNm = "10 diamonds";
                    break;
                case 49:
                    cardNm = "Jack diamonds";
                    break;
                case 50:
                    cardNm = "Q diamonds";
                    break;
                case 51:
                    cardNm = "K diamonds";
                    break;
                case 52:
                    cardNm = "Ace bonus";
                    break;
                case 53:
                    cardNm = "2 bonus";
                    break;
                case 54:
                    cardNm = "3 bonus";
                    break;
                case 55:
                    cardNm = "4 bonus";
                    break;
                case 56:
                    cardNm = "5 bonus";
                    break;
                case 57:
                    cardNm = "6 bonus";
                    break;
                case 58:
                    cardNm = "7 bonus";
                    break;
                case 59:
                    cardNm = "8 bonus";
                    break;
                case 60:
                    cardNm = "9 bonus";
                    break;
                case 61:
                    cardNm = "10 bonus";
                    break;
                case 62:
                    cardNm = "Jack bonus";
                    break;
                case 63:
                    cardNm = "Q bonus";
                    break;
                case 64:
                    cardNm = "K bonus";
                    break;
                case 65:
                    cardNm = "Joker black";
                    break;
                case 66:
                    cardNm = "Joker red";
                    break;
                default:
                    cardNm = "Back of card";
            }
            return cardNm;
        }
    }
}